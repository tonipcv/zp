/*
Usage:
  node scripts/generate-api-key.js <userId> <instanceIdsCommaSeparated> [--name "ERP X"] [--expires 2025-12-31] [--ips 1.2.3.4,5.6.7.8] [--rate 60]

Output:
  - token (mostrar apenas uma vez): zap_<apiKeyId>_<secret>
  - last8 (para referência)
*/

const path = require('path')
require('dotenv').config({ path: path.resolve(process.cwd(), '.env') })
const { PrismaClient } = require('@prisma/client')
const crypto = require('crypto')

const prisma = new PrismaClient()

function parseArgs() {
  const [, , userId, instancesArg, ...rest] = process.argv
  if (!userId || !instancesArg) {
    console.error('Usage: node scripts/generate-api-key.js <userId> <instanceIdsCommaSeparated> [--name "label"] [--expires YYYY-MM-DD] [--ips ip1,ip2] [--rate N]')
    process.exit(1)
  }
  const args = { userId, instanceIds: instancesArg.split(',').map((s) => s.trim()).filter(Boolean) }
  for (let i = 0; i < rest.length; i++) {
    const k = rest[i]
    if (k === '--name') args.name = rest[++i]
    else if (k === '--expires') args.expires = rest[++i]
    else if (k === '--ips') args.ips = rest[++i]
    else if (k === '--rate') args.rate = parseInt(rest[++i], 10)
  }
  return args
}

function deriveHash(secret, salt) {
  const key = crypto.scryptSync(secret, salt, 32)
  return key.toString('hex')
}

async function main() {
  const { userId, instanceIds, name, expires, ips, rate } = parseArgs()

  // Validate user exists
  const user = await prisma.user.findUnique({ where: { id: userId } })
  if (!user) {
    console.error(`User not found: ${userId}`)
    process.exit(1)
  }

  // Validate instances belong to user and exist
  const dbInstances = await prisma.whatsAppInstance.findMany({
    where: { id: { in: instanceIds }, userId },
    select: { id: true },
  })
  const validIds = new Set(dbInstances.map((i) => i.id))
  const invalid = instanceIds.filter((id) => !validIds.has(id))
  if (invalid.length) {
    console.warn(`Warning: some instanceIds are invalid or not owned by user and will be ignored: ${invalid.join(', ')}`)
  }
  const scopedIds = Array.from(validIds)
  if (scopedIds.length === 0) {
    console.error('No valid instanceIds for this user. Aborting.')
    process.exit(1)
  }

  // Generate secret and salt
  const secret = crypto.randomBytes(24).toString('base64url') // ~32 chars url-safe
  const salt = crypto.randomBytes(16).toString('hex')
  const keyHash = deriveHash(secret, salt)
  const last8 = secret.slice(-8)

  // Prepare optional fields
  let expiresAt = undefined
  if (expires) {
    const d = new Date(expires)
    if (isNaN(d.getTime())) {
      console.warn('Invalid --expires format, ignoring. Expected YYYY-MM-DD')
    } else {
      expiresAt = d
    }
  }
  let ipAllowlist = undefined
  if (ips) {
    const list = ips.split(',').map((s) => s.trim()).filter(Boolean)
    if (list.length) ipAllowlist = JSON.stringify(list)
  }

  // Create ApiKey (id will be generated by DB default(cuid()))
  const apiKey = await prisma.apiKey.create({
    data: {
      userId,
      name: name || null,
      keyHash,
      salt,
      status: 'active',
      expiresAt: expiresAt || null,
      ipAllowlist: ipAllowlist || null,
      rateLimitPerMinute: Number.isFinite(rate) ? rate : null,
      last8,
    },
    select: { id: true },
  })

  // Link instances
  await prisma.apiKeyInstance.createMany({
    data: scopedIds.map((instanceId) => ({ apiKeyId: apiKey.id, instanceId })),
    skipDuplicates: true,
  })

  const token = `zap_${apiKey.id}_${secret}`
  console.log('\n✅ API key criada com sucesso!')
  console.log('Usuário: ', userId)
  console.log('Instâncias vinculadas: ', scopedIds.join(','))
  console.log('Token (guarde com segurança, exibido uma única vez):')
  console.log(token)
  console.log('last8: ', last8)
  console.log('\nDica: use este token no header x-api-key')
}

main()
  .catch((e) => {
    console.error('Erro ao gerar API key:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
